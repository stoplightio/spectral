====test====
OAS 3.1 - Validate Petstore
====document====
openapi: 3.1.0
info:
  title: Kitchen Sink OAS3.1
  summary: A short kinda subtitle thing which helps if your API name is silly.
  version: '1.0'
  contact:
    name: Bob the Builder
servers:
  - url: 'http://localhost:3000'
  - url: 'https://{username}.localhost:3000/{basePath}'
    variables:
      username:
        default: demo
        description: this value is assigned by the service provider, in this example `gigantic-server.com`
      port:
        enum:
          - '8443'
          - '443'
        default: '8443'
paths:
  '/users/{userId}':
    parameters:
      - name: userId
        in: path
        required: true
        description: Id of an existing user.
        schema:
          type: integer
    get:
      x-internal: true
      summary: Get User Info by User ID
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Whatever Name We Like:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    age: 24
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                  description: >-
                    If a new email is given, the user's email verified property
                    will be set to false.
                dateOfBirth:
                  type: string
                  format: date
                  example: '1985-10-02'
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
  /users:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
                  age: 25
  '/users/{userId}/avatar':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    put:
      operationId: put-users-userId-avatar
      responses:
        '200':
          description: OK
      summary: Create or replace your avatar.
      parameters:
        - schema:
            type: string
          in: header
components:
  schemas:
    User:
      title: User
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
          examples:
            - 13
          readOnly: true
        firstName:
          type: string
          examples:
            - Rebecca
        lastName:
          type: string
          examples:
            - Baker
        email:
          type: string
          format: email
          examples:
            - rebecca@gmail.com
        phone:
          type:
            - string
            - 'null'
        dateOfBirth:
          type: string
          format: date
          examples:
            - '1985-10-02'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
          readOnly: true
        createDate:
          type: string
          format: date
          description: The date that the user was created.
          readOnly: true
          examples:
            - '2019-08-24'
        age:
          type: number
          description: Hold old is the user at time of signup.
          exclusiveMinimum: 18
          examples:
            - 36
====asset:ruleset.yaml====
extends: [[spectral:oas, off]]
rules:
  oas3-schema: error
====command====
{bin} lint {document} --ruleset {asset:ruleset.yaml}
====stdout====
No results with a severity of 'error' or higher found!
