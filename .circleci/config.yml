version: 2.1

orbs:
  windows: circleci/windows@2.4.0
  node: circleci/node@3.0.0

executors:
  linux:
    docker:
      - image: cimg/base:2021.01

commands:
  cached-dependencies:
    steps:
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: |
            npx lerna bootstrap
            ! git diff --name-only | grep yarn.lock
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

  install-and-build:
    description: >-
      Build everything required to run the test suite
    steps:
      - cached-dependencies
      - run:
          name: Build the code
          command: yarn build

  lint-code:
    steps:
      - run:
          name: Lint code
          command: yarn lint.eslint

  lint-documentation:
    steps:
      - run:
          name: Lint documentation
          command: yarn lint.prettier

  lint-changelog:
    steps:
      - run:
          name: Lint changelog
          command: yarn lint.changelog

  lint-commit-message:
    steps:
      - run:
          name: Lint commit messages
          command: |
            echo "$(git log -1 --pretty=format:"%s")" | npx commitlint

  test-node:
    steps:
      - run: npx lerna run pretest
      - run:
          name: Run node tests
          command: yarn test.jest --coverage --maxWorkers=2

  test-harness:
    steps:
      - run:
          name: Create the Spectral Binary
          command: npx lerna run build.binary --scope=@stoplight/spectral-cli
      - run:
          name: Run harness tests
          command: yarn test.harness

  prepare-release:
    steps:
      - checkout
      - cached-dependencies
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run: npm version from-git
      - run: yarn build

jobs:
  lint:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - cached-dependencies
      - lint-commit-message
      - lint-changelog
      - lint-code
      - lint-documentation

  test:
    parameters:
      os:
        type: executor
      node-version:
        type: string
    executor: << parameters.os >>
    steps:
      - checkout
      - node/install:
          node-version: << parameters.node-version >>.0
          install-yarn: true
          install-npm: false
      - install-and-build
      - test-node
      - test-harness

  test-browser:
    docker:
      - image: circleci/node:latest-browsers
    steps:
      - checkout
      - install-and-build
      - run: npx lerna run pretest
      - run:
          name: Run browser tests
          command: yarn test.karma
      - run:
          name: Run browser tests (nimma)
          command: USE_NIMMA=true yarn test.karma

  test-windows:
    executor:
      name: windows/default
    steps:
      - checkout
      - run: npx lerna bootstrap -- --ignore-engines
      - run: yarn build
      - test-node

  build-windows-binary:
    executor:
      name: windows/default
    steps:
      - prepare-release
      - run: yarn lerna exec "pkg . --targets windows --out-path ./binaries" --scope=@stoplight/spectral-cli
      - persist_to_workspace:
          root: ./packages/cli/
          paths:
            - binaries

  release-docker:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.2
          docker_layer_caching: true
      - run:
          name: set version in package.json
          command: npm --no-git-tag-version --no-commit-hooks -f version from-git
      - run:
          name: docker build
          command: |
            GIT_SHA=${CIRCLE_SHA1:0:7}
            echo "GIT_SHA=${GIT_SHA}";
            docker build . --tag stoplight/spectral:${GIT_SHA};
      - run:
          name: docker push
          command: |
            shopt -s extglob
            GIT_SHA=${CIRCLE_SHA1:0:7}
            echo "GIT_SHA=${GIT_SHA}";
            # Login to DockerHub
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
            DOCKER_BRANCH="${CIRCLE_BRANCH//\//-}";
            if [[ "$DOCKER_BRANCH" == "master" ]]; then
              DOCKER_BRANCH="latest";
            fi
            echo "DOCKER_BRANCH=${DOCKER_BRANCH}";
            if [[ -n "$DOCKER_BRANCH" ]]; then
              docker tag stoplight/spectral:${GIT_SHA} stoplight/spectral:${DOCKER_BRANCH};
            fi
            if [[ -n "$CIRCLE_TAG" ]]; then
              FULL_VERSION="${CIRCLE_TAG/v/}";
              MINOR_VERSION="${FULL_VERSION/%.+([0-9])/}";
              MAJOR_VERSION="${MINOR_VERSION/%.+([0-9])/}";
              echo "FULL_VERSION=$FULL_VERSION";
              echo "MINOR_VERSION=$MINOR_VERSION";
              echo "MAJOR_VERSION=$MAJOR_VERSION";
              docker tag stoplight/spectral:${GIT_SHA} stoplight/spectral:${FULL_VERSION};
              docker tag stoplight/spectral:${GIT_SHA} stoplight/spectral:${MINOR_VERSION};
              docker tag stoplight/spectral:${GIT_SHA} stoplight/spectral:${MAJOR_VERSION};
            fi
            echo "Docker tags:";
            docker images stoplight/spectral --format="{{ .Tag }}";
            docker push stoplight/spectral:${GIT_SHA};
            if [[ -n "$DOCKER_BRANCH" ]]; then
              docker push stoplight/spectral:${DOCKER_BRANCH};
            fi
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker push stoplight/spectral:${FULL_VERSION} \
                          stoplight/spectral:${MINOR_VERSION} \
                          stoplight/spectral:${MAJOR_VERSION};
            fi

  release:
    docker:
      - image: circleci/node:14
    steps:
      - prepare-release
      - run: |
          if [[ "$CIRCLE_TAG" == *beta* ]] ; then
            npm publish --tag beta
          elif [[ "$CIRCLE_TAG" == *alpha* ]] ; then
            npm publish --tag alpha
          else
            npm publish
          fi
      - run: lerna exec "pkg . --targets linux,macos,alpine --out-path ./binaries" --scope=@stoplight/spectral-cli
      - persist_to_workspace:
          root: ./packages/cli/
          paths:
            - binaries

  upload_artifacts:
    docker:
      - image: circleci/golang:1-stretch
    steps:
      - attach_workspace:
          at: /tmp/
      - run:
          name: "Download GitHub Release Utility"
          command: go get github.com/tcnksm/ghr
      - run:
          name: "Publish Release artifacts on GitHub"
          command: ghr -t ${GH_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} ${CIRCLE_TAG} /tmp/packages/cli/binaries

workflows:
  commit:
    jobs:
      - test:
          matrix:
            parameters:
              os:
                - linux
              node-version:
                - "12.21"
                - "14.16"
                - "16.0"
      - test-windows
      - test-browser
      - lint

  release:
    jobs:
      - release:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - build-windows-binary:
         filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - release-docker:
         filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - upload_artifacts:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - release
            - build-windows-binary
