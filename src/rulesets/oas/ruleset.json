{
  "rules": {
    "operation-2xx-response": {
      "summary": "Operation must have at least one `2xx` response.",
      "recommended": true,
      "type": "style",
      "given": "$..paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]",
      "then": {
        "field": "responses",
        "function": "oasOp2xxResponse"
      },
      "tags": [
        "operation"
      ]
    },
    "operation-formData-consume-check": {
      "summary": "Operations with an `in: formData` parameter must include `application/x-www-form-urlencoded` or `multipart/form-data` in their `consumes` property.",
      "recommended": true,
      "type": "validation",
      "given": "$..paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]",
      "then": {
        "function": "oasOpFormDataConsumeCheck"
      },
      "tags": [
        "operation"
      ]
    },
    "operation-operationId-unique": {
      "summary": "Every operation must have a unique `operationId`.",
      "recommended": true,
      "type": "validation",
      "severity": 0,
      "given": "$",
      "then": {
        "function": "oasOpIdUnique"
      },
      "tags": [
        "operation"
      ]
    },
    "operation-parameters": {
      "summary": "Operation parameters are unique and non-repeating.",
      "recommended": true,
      "type": "validation",
      "given": "$",
      "then": {
        "function": "oasOpParams"
      },
      "tags": [
        "operation"
      ]
    },
    "path-params": {
      "summary": "Path parameters are correct and valid.",
      "message": "{{error}}",
      "type": "validation",
      "severity": 0,
      "recommended": true,
      "given": "$",
      "then": {
        "function": "oasPathParam"
      },
      "tags": [
        "given"
      ]
    },
    "contact-properties": {
      "summary": "Contact object should have `name`, `url` and `email`.",
      "recommended": false,
      "type": "style",
      "given": "$.info.contact",
      "then": [
        {
          "field": "name",
          "function": "truthy"
        },
        {
          "field": "url",
          "function": "truthy"
        },
        {
          "field": "email",
          "function": "truthy"
        }
      ],
      "tags": [
        "api"
      ]
    },
    "example-value-or-externalValue": {
      "summary": "Example should have either a `value` or `externalValue` field.",
      "recommended": false,
      "type": "style",
      "given": "$..example",
      "then": {
        "function": "xor",
        "functionOptions": {
          "properties": [
            "externalValue",
            "value"
          ]
        }
      }
    },
    "info-contact": {
      "summary": "Info object should contain `contact` object.",
      "recommended": true,
      "type": "style",
      "given": "$",
      "then": {
        "field": "info.contact",
        "function": "truthy"
      },
      "tags": [
        "api"
      ]
    },
    "info-description": {
      "summary": "OpenAPI object info `description` must be present and non-empty string.",
      "recommended": true,
      "type": "style",
      "given": "$",
      "then": {
        "field": "info.description",
        "function": "truthy"
      },
      "tags": [
        "api"
      ]
    },
    "info-license": {
      "summary": "OpenAPI object info `license` must be present and non-empty string.",
      "recommended": false,
      "type": "style",
      "given": "$",
      "then": {
        "field": "info.license",
        "function": "truthy"
      },
      "tags": [
        "api"
      ]
    },
    "license-url": {
      "summary": "License object should include `url`.",
      "recommended": false,
      "type": "style",
      "given": "$",
      "then": {
        "field": "info.license.url",
        "function": "truthy"
      },
      "tags": [
        "api"
      ]
    },
    "no-eval-in-markdown": {
      "summary": "Markdown descriptions should not contain `eval(`.",
      "recommended": false,
      "type": "style",
      "given": "$..*",
      "then": [
        {
          "field": "description",
          "function": "pattern",
          "functionOptions": {
            "notMatch": "eval\\("
          }
        },
        {
          "field": "title",
          "function": "pattern",
          "functionOptions": {
            "notMatch": "eval\\("
          }
        }
      ]
    },
    "no-script-tags-in-markdown": {
      "summary": "Markdown descriptions should not contain `<script>` tags.",
      "recommended": true,
      "type": "style",
      "given": "$..*",
      "then": [
        {
          "field": "description",
          "function": "pattern",
          "functionOptions": {
            "notMatch": "<script"
          }
        },
        {
          "field": "title",
          "function": "pattern",
          "functionOptions": {
            "notMatch": "<script"
          }
        }
      ]
    },
    "only-local-references": {
      "summary": "References should start with `#/`.",
      "recommended": false,
      "type": "style",
      "given": "$..['$ref']",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^#\\/"
        }
      },
      "tags": [
        "references"
      ]
    },
    "openapi-tags-alphabetical": {
      "summary": "OpenAPI object should have alphabetical `tags`.",
      "recommended": false,
      "type": "style",
      "given": "$",
      "then": {
        "field": "tags",
        "function": "alphabetical",
        "functionOptions": {
          "keyedBy": "name"
        }
      },
      "tags": [
        "api"
      ]
    },
    "openapi-tags": {
      "summary": "OpenAPI object should have non-empty `tags` array.",
      "recommended": false,
      "type": "style",
      "given": "$",
      "then": {
        "field": "tags",
        "function": "truthy"
      },
      "tags": [
        "api"
      ]
    },
    "operation-default-response": {
      "summary": "Operations must have a default response.",
      "recommended": false,
      "type": "style",
      "given": "$..paths.*.*.responses",
      "then": {
        "field": "default",
        "function": "truthy"
      },
      "tags": [
        "operation"
      ]
    },
    "operation-description": {
      "summary": "Operation `description` must be present and non-empty string.",
      "recommended": true,
      "type": "style",
      "given": "$..paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]",
      "then": {
        "field": "description",
        "function": "truthy"
      },
      "tags": [
        "operation"
      ]
    },
    "operation-operationId": {
      "summary": "Operation should have an `operationId`.",
      "recommended": true,
      "type": "style",
      "given": "$..paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]",
      "then": {
        "field": "operationId",
        "function": "truthy"
      },
      "tags": [
        "operation"
      ]
    },
    "operation-operationId-valid-in-url": {
      "summary": "operationId may only use characters that are valid when used in a URL.",
      "recommended": true,
      "type": "validation",
      "given": "$..paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]",
      "then": {
        "field": "operationId",
        "function": "pattern",
        "functionOptions": {
          "match": "^[A-Za-z0-9-._~:/?#\\[\\]@!\\$&'()*+,;=]*$"
        }
      },
      "tags": [
        "operation"
      ]
    },
    "operation-singular-tag": {
      "summary": "Operation may only have one tag.",
      "recommended": false,
      "type": "style",
      "given": "$..paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]",
      "then": {
        "field": "tags",
        "function": "length",
        "functionOptions": {
          "max": 1
        }
      },
      "tags": [
        "operation"
      ]
    },
    "operation-summary-formatted": {
      "summary": "Operation `summary` should start with upper case and end with a dot.",
      "recommended": false,
      "type": "style",
      "given": "$..paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]",
      "then": {
        "field": "summary",
        "function": "pattern",
        "functionOptions": {
          "match": "^[A-Z].*\\.$"
        }
      },
      "tags": [
        "operation"
      ]
    },
    "operation-tags": {
      "summary": "Operation should have non-empty `tags` array.",
      "recommended": true,
      "type": "style",
      "given": "$..paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]",
      "then": {
        "field": "tags",
        "function": "truthy"
      },
      "tags": [
        "operation"
      ]
    },
    "parameter-description": {
      "summary": "Parameter objects should have a `description`.",
      "recommended": false,
      "type": "style",
      "given": "$..parameters[*]",
      "when": {
        "field": "@key",
        "pattern": "^(?!.*(\\$ref))"
      },
      "then": {
        "field": "description",
        "function": "truthy"
      },
      "tags": [
        "parameters"
      ]
    },
    "path-declarations-must-exist": {
      "summary": "given declarations cannot be empty, ex.`/given/{}` is invalid.",
      "recommended": true,
      "type": "style",
      "given": "$..paths",
      "then": {
        "field": "@key",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "{}"
        }
      },
      "tags": [
        "given"
      ]
    },
    "path-keys-no-trailing-slash": {
      "summary": "given keys should not end with a slash.",
      "recommended": true,
      "type": "style",
      "given": "$..paths",
      "then": {
        "field": "@key",
        "function": "pattern",
        "functionOptions": {
          "notMatch": ".+\\/$"
        }
      },
      "tags": [
        "given"
      ]
    },
    "path-not-include-query": {
      "summary": "given keys should not include a query string.",
      "recommended": true,
      "type": "style",
      "given": "$..paths",
      "then": {
        "field": "@key",
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\?"
        }
      },
      "tags": [
        "given"
      ]
    },
    "tag-description": {
      "summary": "Tag object should have a `description`.",
      "recommended": false,
      "type": "style",
      "given": "$.tags[*]",
      "then": {
        "field": "description",
        "function": "truthy"
      },
      "tags": [
        "api"
      ]
    }
  }
}
